# coding: utf-8

"""
    h2AuxCalculatorApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2018-05-24T17:52:00Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from openapi_client.models.response_schema_compressors_inner import ResponseSchemaCompressorsInner
from openapi_client.models.response_schema_dispensers_inner import ResponseSchemaDispensersInner
from openapi_client.models.response_schema_storage_inner import ResponseSchemaStorageInner

class ResponseSchema(BaseModel):
    """
    ResponseSchema
    """
    calculation_id: Optional[StrictStr] = None
    dispensers: Optional[conlist(ResponseSchemaDispensersInner)] = None
    compressors: Optional[conlist(ResponseSchemaCompressorsInner)] = None
    storage: Optional[conlist(ResponseSchemaStorageInner)] = None
    __properties = ["calculation_id", "dispensers", "compressors", "storage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResponseSchema:
        """Create an instance of ResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in dispensers (list)
        _items = []
        if self.dispensers:
            for _item in self.dispensers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dispensers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compressors (list)
        _items = []
        if self.compressors:
            for _item in self.compressors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['compressors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in storage (list)
        _items = []
        if self.storage:
            for _item in self.storage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['storage'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResponseSchema:
        """Create an instance of ResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResponseSchema.parse_obj(obj)

        _obj = ResponseSchema.parse_obj({
            "calculation_id": obj.get("calculation_id"),
            "dispensers": [ResponseSchemaDispensersInner.from_dict(_item) for _item in obj.get("dispensers")] if obj.get("dispensers") is not None else None,
            "compressors": [ResponseSchemaCompressorsInner.from_dict(_item) for _item in obj.get("compressors")] if obj.get("compressors") is not None else None,
            "storage": [ResponseSchemaStorageInner.from_dict(_item) for _item in obj.get("storage")] if obj.get("storage") is not None else None
        })
        return _obj


